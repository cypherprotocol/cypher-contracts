/// fERC20127: https://etherscan.io/address/0xEbE0d1cb6A0b8569929e062d67bfbC07608f0A47#contracts -- need deposit()
/// fETH127: https://etherscan.io/address/0x26267e41CeCa7C8E0f143554Af707336f27Fa051#contracts -- need borrow()
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

import "forge-std/Test.sol";

import {Bool} from "../../../lib/BoolTool.sol";
import {IERC20} from "../../../../src/interfaces/IERC20.sol";

contract MockRari is Test {
    mapping(address => uint256) internal accountBorrows;
    address public token;

    constructor(address _token) {
        token = _token;
    }

    function depositTokens(uint256 amount) external {
        require(amount > 0, "Need more deposited");

        IERC20(token).transferFrom(msg.sender, address(this), amount);

        accountBorrows[msg.sender] += amount;
    }

    function borrow() public payable returns (uint256) {
        (bool success, ) = msg.sender.call{value: accountBorrows[msg.sender]}("");

        require(success, "Borrow failed");

        // this is the attack- decrement AFTER withdraw (should be before)
        accountBorrows[msg.sender] = 0;
    }

    receive() external payable {}
}
